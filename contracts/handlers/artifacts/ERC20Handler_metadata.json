{
	"compiler": {
		"version": "0.6.4+commit.1dca32f3"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "_bridgeAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "_burnList",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "_contractWhitelist",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes8",
						"name": "",
						"type": "bytes8"
					},
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"name": "_depositRecords",
				"outputs": [
					{
						"internalType": "address",
						"name": "_tokenAddress",
						"type": "address"
					},
					{
						"internalType": "bytes8",
						"name": "_destinationChainID",
						"type": "bytes8"
					},
					{
						"internalType": "bytes32",
						"name": "_resourceID",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_destinationRecipientAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_depositer",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "_resourceIDToTokenContractAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "_tokenContractAddressToResourceID",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "resourceID",
						"type": "bytes32"
					},
					{
						"internalType": "bytes8",
						"name": "destinationChainID",
						"type": "bytes8"
					},
					{
						"internalType": "uint64",
						"name": "depositNonce",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "depositer",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipientAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "deposit",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "resourceID",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "recipientAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "executeProposal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "fundERC20",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "depositNonce",
						"type": "uint64"
					},
					{
						"internalType": "bytes8",
						"name": "destId",
						"type": "bytes8"
					}
				],
				"name": "getDepositRecord",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "_tokenAddress",
								"type": "address"
							},
							{
								"internalType": "bytes8",
								"name": "_destinationChainID",
								"type": "bytes8"
							},
							{
								"internalType": "bytes32",
								"name": "_resourceID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "_destinationRecipientAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "_depositer",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "_amount",
								"type": "uint256"
							}
						],
						"internalType": "struct ERC20Handler.DepositRecord",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "initBridgeAddress",
						"type": "address"
					}
				],
				"name": "init",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					}
				],
				"name": "setBurnable",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "resourceID",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					}
				],
				"name": "setResource",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"deposit(bytes32,bytes8,uint64,address,address,uint256)": {
					"details": "Depending if the corresponding {tokenAddress} for the parsed {resourceID} is marked true in {_burnList}, deposited tokens will be burned, if not, they will be locked.",
					"params": {
						"depositNonce": "This value is generated as an ID by the Bridge contract.",
						"depositer": "Address of account making the deposit in the Bridge contract.",
						"destinationChainID": "Chain ID of chain tokens are expected to be bridged to."
					}
				},
				"fundERC20(address,address,uint256)": {
					"params": {
						"amount": "Amount of tokens to transfer.",
						"owner": "Address of current token owner.",
						"tokenAddress": "Address of ERC20 to transfer."
					}
				},
				"getDepositRecord(uint64,bytes8)": {
					"params": {
						"depositNonce": "This ID will have been generated by the Bridge contract.",
						"destId": "ID of chain deposit will be bridged to."
					},
					"returns": {
						"_0": "DepositRecord which consists of: - _tokenAddress Address used when {deposit} was executed. - _destinationChainID ChainID deposited tokens are intended to end up on. - _resourceID ResourceID used when {deposit} was executed. - _lenDestinationRecipientAddress Used to parse recipient's address from {_destinationRecipientAddress} - _destinationRecipientAddress Address tokens are intended to be deposited to on desitnation chain. - _depositer Address that initially called {deposit} in the Bridge contract. - _amount Amount of tokens that were deposited."
					}
				},
				"setBurnable(address)": {
					"params": {
						"contractAddress": "Address of contract to be used when making or executing deposits."
					}
				},
				"setResource(bytes32,address)": {
					"params": {
						"contractAddress": "Address of contract to be called when a deposit is made and a deposited is executed.",
						"resourceID": "ResourceID to be used when making deposits."
					}
				},
				"withdraw(address,address,uint256)": {
					"params": {
						"amount": "The amount of ERC20 tokens to release.",
						"recipient": "Address to release tokens to.",
						"tokenAddress": "Address of token contract to release."
					}
				}
			},
			"title": "Handles ERC20 deposits and deposit executions."
		},
		"userdoc": {
			"methods": {
				"deposit(bytes32,bytes8,uint64,address,address,uint256)": {
					"notice": "A deposit is initiatied by making a deposit in the Bridge contract.Data passed into the function should be constructed as follows: amount                      uint256     bytes   0 - 32 recipientAddress length     uint256     bytes  32 - 64 recipientAddress            bytes       bytes  64 - END"
				},
				"executeProposal(bytes32,address,uint256)": {
					"notice": "Proposal execution should be initiated when a proposal is finalized in the Bridge contract. by a relayer on the deposit's destination chain.Data passed into the function should be constructed as follows: amount                                 uint256     bytes  0 - 32 destinationRecipientAddress length     uint256     bytes  32 - 64 destinationRecipientAddress            bytes       bytes  64 - END"
				},
				"fundERC20(address,address,uint256)": {
					"notice": "Used to transfer tokens into the safe to fund proposals."
				},
				"setBurnable(address)": {
					"notice": "First verifies {contractAddress} is whitelisted, then sets {_burnList}[{contractAddress}] to true."
				},
				"setResource(bytes32,address)": {
					"notice": "First verifies {_resourceIDToContractAddress}[{resourceID}] and {_contractAddressToResourceID}[{contractAddress}] are not already set, then sets {_resourceIDToContractAddress} with {contractAddress}, {_contractAddressToResourceID} with {resourceID}, and {_contractWhitelist} to true for {contractAddress}."
				},
				"withdraw(address,address,uint256)": {
					"notice": "Used to manually release ERC20 tokens from ERC20Safe."
				}
			},
			"notice": "This contract is intended to be used with the Bridge contract."
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/handlers/ERC20Handler.sol": "ERC20Handler"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/ERC20Safe.sol": {
			"keccak256": "0x1578bcc294d5a24b62bc9f9579e55caef7e97cc09c09bd9e61fceddaabf33164",
			"urls": [
				"bzz-raw://890e910a6d9498fd491696d74f7fdb4ebc1681780e63bd34184bb32b43d3abe6",
				"dweb:/ipfs/QmdN1hgfWKkWKiNome4ZFSeZhMtsYF7SzyLUjymxVcVMqY"
			]
		},
		"contracts/ExampleToken.sol": {
			"keccak256": "0x9051f6af9ee33120eb46a723dfafb5346d2aa6869805d31914e368f2024bff49",
			"urls": [
				"bzz-raw://8f9cbcdbb4ccb4ed73db09cdc6ce9a4c9cd6fd61064c12b28934f766b53f661a",
				"dweb:/ipfs/QmccYw9pPyKM1sG1o4Xt9eGJJ74vuFcmXpSkqaPQ9xF5uA"
			]
		},
		"contracts/handlers/ERC20Handler.sol": {
			"keccak256": "0xe91bcd143dd75358b5420109734931abce135064ee26e6225f8347494e64e649",
			"urls": [
				"bzz-raw://1621b2828caa4acaa8976c418594469c28358ecb321b4c84d809ffc98e53ac60",
				"dweb:/ipfs/QmWYTTYj4fgcnGArPZuF4GeUYEdChivjD3D1syUxbMaCrw"
			]
		},
		"contracts/handlers/HandlerHelpers.sol": {
			"keccak256": "0xddb5ce67ae54c8a64c11762ecd28fdbbb6c1cedac2bad9c1fc50db10b7f6b2b1",
			"urls": [
				"bzz-raw://e0758c948af4b037699a3fc200afc8043721386b3dc359336688c954658900a1",
				"dweb:/ipfs/QmZWVAtz7FBSbuD84gzpobwZ46fAnXajPSv5bYX49GiGhE"
			]
		},
		"contracts/interfaces/IDepositExecute.sol": {
			"keccak256": "0xe4032f293388e5f5c75ff54c439c1c2df3556150d8f49f9bf3e8904b92d9b621",
			"urls": [
				"bzz-raw://0a12801112a9392530d16ed8b88a27ae57d2522e67e214e038c1ab6631a946f6",
				"dweb:/ipfs/Qmd8sEL4WGs26DJQSxAeDBNvGyQhB7YLW8j6H9FnY8SjH1"
			]
		},
		"contracts/interfaces/IERC20.sol": {
			"keccak256": "0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5",
			"urls": [
				"bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08",
				"dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC"
			]
		},
		"contracts/interfaces/IERCHandler.sol": {
			"keccak256": "0x86538bf44b756628487de0eed8b13c8f8a8db6c131a72adb73074336105e0034",
			"urls": [
				"bzz-raw://39c44d3b60330ab51acf992a6da8b5fb43ba1b41ea2e80560242b24b362aeeed",
				"dweb:/ipfs/QmeUMgQDNoS5QKAkodzF1gzS5jNpt5mGJMjNq8sMd5ZV2W"
			]
		},
		"contracts/libraries/EnumerableSet.sol": {
			"keccak256": "0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164",
			"urls": [
				"bzz-raw://4580d57781513d98870d9738c7d39094336e0a70cdb90d68dad549c6ced466ec",
				"dweb:/ipfs/Qmf9YZzzRFuvMnav9dgmeRUpdYMMECiZX8w25sHWVbA18V"
			]
		},
		"contracts/libraries/SafeMath.sol": {
			"keccak256": "0x7bcce617d277bb99e9417e83338c7e701bc299b900e0e7788e588dee7e7fa219",
			"urls": [
				"bzz-raw://b92779bed0593fe3baff90ca47d201c3856d4d8bb38b217c13fabf12e791d951",
				"dweb:/ipfs/QmQ7yoNKGUmrtqxQ2oCgz1GoYaEiyHZ5tJRCSWy4D1mEqi"
			]
		},
		"contracts/utils/AccessControl.sol": {
			"keccak256": "0x7798d1adc6f22a61526dc8a3f6dddba67178d82ae23c7a26d8e9188cb594e449",
			"urls": [
				"bzz-raw://bc4dca67c48068fe141555a393cae9cec5dccb420d175187bf3b5c5829f181e6",
				"dweb:/ipfs/QmYPFY2uSEUidhX68JuYqSFUqFFP4KUmN5hW2QKjxxf1K8"
			]
		},
		"contracts/utils/Context.sol": {
			"keccak256": "0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0",
			"urls": [
				"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f",
				"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96"
			]
		},
		"contracts/utils/ERC20.sol": {
			"keccak256": "0x51b29aa1a6a31cc55d4b84718717b1beb23043ec15a53ce9e35f58cf8e18d00b",
			"urls": [
				"bzz-raw://38b818e46b837f2cdc3b65d09e70fa6b626df043709df79c3aaf7a9d785187f3",
				"dweb:/ipfs/QmdkCTVMaaoCE44V48xa5AjZ7iNcqKzuHaAzY88h2bvRMo"
			]
		},
		"contracts/utils/ERC20Burnable.sol": {
			"keccak256": "0x60b0547de2cd757b179484bb06c92be19e649e4db1f4c50095b9f1a102ceac86",
			"urls": [
				"bzz-raw://781f93e1c6965f18816f34b4061166dec0d51e8a668ff9838c6bfd7a97bbc2bb",
				"dweb:/ipfs/QmQU1nKx9cpE34YFT6t3sPSBdDWJtNi64woWuParGiB6Wj"
			]
		},
		"contracts/utils/ERC20Pausable.sol": {
			"keccak256": "0x2e8bb532b93579d85735307c9d37a9fc5af1eb488dbb12f07874ccb21bba7834",
			"urls": [
				"bzz-raw://c3145890ce5e681f60d83855c933672f9a652adb596f1a9b2a1116e63fefb773",
				"dweb:/ipfs/QmRXK3YVojvf4xwQ2ByY1DaKc8WZVmirVNq2uatLKGHYs1"
			]
		},
		"contracts/utils/Ownable.sol": {
			"keccak256": "0x1b58f81dca96b8c8f7cdc4e2caf323077894650cfbecb0272ec041a558aa9a6f",
			"urls": [
				"bzz-raw://2a26e091981170b225cb563ca5f228b226fe2f165ecc107f90018429d81c5528",
				"dweb:/ipfs/QmVNJg98zgvvzjbdQjKD3Jidb91mxwUsErxetSzs4gJH8S"
			]
		},
		"contracts/utils/Pausable.sol": {
			"keccak256": "0x31bb799783dd38c6d9404a796ccf6fa6eb7976f858217f0e7ff947904a748d37",
			"urls": [
				"bzz-raw://ffbf479b073ec0d66b4597e11b8bd04c645c81067be99a7a00e50608eab0a0fc",
				"dweb:/ipfs/QmdHV8JTN75xuKuwUiPKgCrLzgPsgegwyGKG7q823fV74f"
			]
		}
	},
	"version": 1
}